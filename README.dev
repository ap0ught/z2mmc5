# Developer Documentation - Z2MMC5

This document provides technical details for developers working on the Z2MMC5 project.

## Development Setup

### Prerequisites

1. **CC65 Toolchain**
   ```bash
   # Ubuntu/Debian
   sudo apt-get install cc65
   
   # macOS
   brew install cc65
   
   # Windows
   # Download from: https://cc65.github.io/
   ```

2. **Development Tools** (Optional)
   ```bash
   # For patch creation
   sudo apt-get install xdelta3
   
   # Download flips: https://www.romhacking.net/utilities/1040/
   # Download Lunar IPS: https://fusoya.eludevisibility.org/lips/
   ```

3. **Source ROM**
   - Place `Zelda II - The Adventure of Link (USA).nes` in project root
   - Verify MD5: `d0690f3b2b1d80bcd0c616fbfdfm28ce`

### Build System

The project uses a custom Makefile with the following targets:

```bash
# Build everything
make SRC_ROM="path/to/rom.nes" TGT_NAME=z2mmc5

# Clean build artifacts  
make clean

# Build directory structure
make dir
```

#### Makefile Variables
- `SRC_ROM`: Path to source ROM file
- `TGT_NAME`: Output filename prefix
- `SRCDIR`: Source directory (auto-detected)
- `BUILDDIR`: Build output directory

## Project Structure

```
z2mmc5/
├── z2mmc5.s           # Main assembly source
├── mmc5regs.inc       # MMC5 register definitions
├── z2mmc5.cfg         # Linker configuration
├── Makefile           # Build system
├── compile.bat        # Windows build script
├── build/             # Build artifacts (created during build)
└── *.bps/ips/xdelta  # Generated patch files
```

## Code Architecture

### Assembly Organization

**z2mmc5.s** is organized into several key sections:

1. **Includes and Definitions**
   ```assembly
   .include "build.inc"     # Generated build configuration
   .include "mmc5regs.inc"  # MMC5 register constants
   ```

2. **Macros**
   - `patch_segment`: Define patchable code segments
   - `patch_set_mirror`: Set mirroring mode
   - `patch_call`: Patch function calls

3. **Memory Segments**
   - `VARS`: Zero page and RAM variables
   - `HIVARS`: High RAM variables  
   - `HDR`: iNES header modifications
   - `BANK0-BANKF`: Original ROM banks
   - `BANK10-BANK1F`: Extended MMC5 banks
   - `CHRBANK0-CHRBANKF`: CHR-ROM banks

### Key Components

#### Banking System
```assembly
; Switch to 16KB bank mode
Switch16kBank:
    asl a                    ; Bank number * 2
    ora #PRG_BANK_ROM       ; Set ROM flag
    sta PrgBank8Reg         ; Set lower 8KB bank
    ora #$1                 ; Next bank
    sta PrgBankAReg         ; Set upper 8KB bank
```

#### CHR Banking
```assembly
SwitchChrBank:
    lsr a                   ; Bank / 2
    sta BgChrBank3Reg      ; Background CHR
    sta SpChrBank7Reg      ; Sprite CHR
```

#### IRQ Handler
```assembly
IrqHdlr:
    pha                     ; Save registers
    txa
    pha
    
    lda LineIrqStatusReg   ; Clear IRQ status
    
    ; Handle scrolling effects
    ldx PpuCtrlForIrq
    lda ScrollPosForIrq
    sta PpuScroll_2005
    
    pla                     ; Restore registers
    tax
    pla
    rti
```

## MMC5 Register Usage

### Banking Registers
- `$5100`: PRG banking mode (set to 3 for 8KB banks)
- `$5101`: CHR banking mode (set to 0 for 8KB banks)
- `$5114-$5117`: PRG bank selection registers
- `$5120-$512B`: CHR bank selection registers

### Control Registers  
- `$5105`: Nametable mirroring control
- `$5203`: Scanline IRQ target
- `5204`: Scanline IRQ status/enable

See `mmc5regs.inc` for complete register definitions.

## Memory Map

### PRG-ROM Layout
```
$E000-$FFFF: Bank F (fixed)
$C000-$DFFF: Bank E (switchable)  
$A000-$BFFF: Bank switchable (8KB)
$8000-$9FFF: Bank switchable (8KB)
```

### PRG-RAM Layout
```
$6000-$7FFF: 8KB battery-backed RAM
```

### Important Variables
```assembly
; Located in original Z2 RAM locations
CurBank8:  .byte 0  ; Current bank at $8000
CurBankA:  .byte 0  ; Current bank at $A000
Saved16kBank: .byte 0  ; Saved bank for restoration
```

## Patching System

The project uses a sophisticated patching system to modify the original ROM:

### Patch Segments
Defined in `z2mmc5.cfg`, these specify exact memory locations to patch:

```
PATCH_RESET_HDLR_F: load = PRGF, type = overwrite, start = $ff70;
PATCH_CALL_SET_VMIRROR: load = PRGE, type = overwrite, start = $c4d0;
```

### Free Space Usage
The converter utilizes free space in original ROM banks:
- `BANK_C_FREE_SPACE_1`: $878C-$8FFF (2164 bytes)
- `BANK_D_FREE_SPACE`: $AC09-$BFFF (5367 bytes)  
- `BANK_F_FREE_SPACE_1`: $FEAA-$FF4B (162 bytes)

## Building and Testing

### Build Process
1. **Preprocessing**: Generate `build.inc` with ROM path
2. **Assembly**: CA65 assembles source files  
3. **Linking**: LD65 links with configuration
4. **Patch Generation**: Create BPS/IPS/xdelta files

### Debug Information
- Build with `-g` flag for debug symbols
- `map.txt`: Memory layout information
- `labels.txt`: Symbol definitions
- `.dbg` file: Full debug information

### Testing Checklist
- [ ] ROM boots properly
- [ ] Banking functions correctly
- [ ] CHR switching works
- [ ] Save/load functionality
- [ ] IRQ effects function
- [ ] No graphical corruption
- [ ] Audio plays correctly

## Common Development Tasks

### Adding New Banks
1. Update `NUM_PRG_BANKS` in z2mmc5.s
2. Add bank segments to z2mmc5.cfg
3. Include bank data in assembly

### Modifying Patches
1. Locate patch segment in z2mmc5.cfg
2. Update assembly code in corresponding section
3. Verify size constraints with assertions

### Adding IRQ Effects
1. Modify `IrqHdlr` in z2mmc5.s
2. Set up IRQ target with `LineIrqTgtReg`
3. Enable IRQ with `LineIrqStatusReg`

### Debugging Build Issues
1. Check `build/z2mmc5/map.txt` for memory conflicts
2. Verify assertions in assembly output
3. Use debug symbols for troubleshooting

## Contributing Guidelines

### Code Style
- Use tabs for indentation
- Comment complex assembly sections
- Follow existing naming conventions
- Keep lines under 80 characters when possible

### Testing Requirements
- Test on multiple emulators
- Verify patch file generation
- Check original game functionality
- Document any behavioral changes

### Submitting Changes
1. Create feature branch
2. Test thoroughly
3. Update documentation if needed
4. Submit pull request with description

## Technical Resources

### Documentation
- [NESdev Wiki](https://wiki.nesdev.com/): Comprehensive NES documentation
- [MMC5 Reference](https://wiki.nesdev.com/w/index.php/MMC5): MMC5-specific details
- [CC65 Documentation](https://cc65.github.io/doc/): Assembler/linker reference

### Tools
- [Mesen Debugger](https://www.mesen.ca/): Excellent debugging capabilities
- [FCEUX](http://fceux.com/): Popular NES emulator with debugging
- [Hex Fiend](https://ridiculousfish.com/hexfiend/): Mac hex editor
- [HxD](https://mh-nexus.de/en/hxd/): Windows hex editor

### Communities
- [NESdev Forums](https://forums.nesdev.com/): Active development community
- [ROM Hacking.net](https://www.romhacking.net/): Tools and resources
- [r/EmuDev](https://www.reddit.com/r/EmuDev/): Development discussions

## Troubleshooting

### Common Build Errors
- **"Segment exceeds size"**: Patch code too large, optimize or find more space
- **"Symbol not found"**: Missing include or undefined label
- **"Address assertion failed"**: Patch loaded at wrong location

### Runtime Issues  
- **Black screen**: Check reset handler and banking setup
- **Garbled graphics**: Verify CHR banking implementation
- **No audio**: Ensure audio hardware initialization
- **Save corruption**: Check battery-backed RAM configuration

### Performance Issues
- **Slow banking**: Optimize bank switching code
- **IRQ timing**: Adjust scanline IRQ targets
- **Memory usage**: Review free space allocation

---

For additional help, consult the main README.md or create an issue on GitHub.